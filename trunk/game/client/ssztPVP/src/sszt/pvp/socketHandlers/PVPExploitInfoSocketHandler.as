package sszt.pvp.socketHandlers
{
	import sszt.core.data.GlobalAPI;
	import sszt.core.data.GlobalData;
	import sszt.core.data.ProtocolType;
	import sszt.core.manager.LanguageManager;
	import sszt.core.socketHandlers.BaseSocketHandler;
	import sszt.events.SceneModuleEvent;
	import sszt.interfaces.socket.IPackageOut;
	import sszt.module.ModuleEventDispatcher;
	import sszt.pvp.PVPModule;
	import sszt.pvp.events.PVPEvent;
	
	public class PVPExploitInfoSocketHandler extends BaseSocketHandler
	{
		public function PVPExploitInfoSocketHandler(handlerData:Object=null)
		{
			super(handlerData);
		}
		override public function getCode():int
		{			
			return ProtocolType.PVP_EXPLOIT_INFO;
		}
		/**
		 * 处理服务端返回的数据
		 */
		override public function handlePackage():void
		{
			var exploit:int = _data.readInt();
			var pvp1_day_exploit:int = _data.readInt();
			
			updateExploit(exploit);
			GlobalData.pvpInfo.pvp1_day_award = pvp1_day_exploit;
			GlobalData.pvpInfo.dispatchEvent(new PVPEvent(PVPEvent.PVP_EXPLOIT_INFO_UPDATE));
			handComplete();
		}
		
		private function updateExploit(value:int):void
		{
			if(GlobalData.pvpInfo.exploit == value)return;
			var old:int = GlobalData.pvpInfo.exploit;
			GlobalData.pvpInfo.exploit = value >= 0 ? value : 0;
			var temp:int  = GlobalData.pvpInfo.exploit - old;
			if(temp <= 0)return;
			var message:String = LanguageManager.getWord("ssztl.common.gainExploit1",temp);
			ModuleEventDispatcher.dispatchSceneEvent(new SceneModuleEvent(SceneModuleEvent.ADD_EVENTLIST,message));
		}
		
		/**
		 * 发送到服务端
		 * @param tempId
		 */
		public static function send():void
		{
			var pkg:IPackageOut = GlobalAPI.socketManager.getPackageOut(ProtocolType.PVP_EXPLOIT_INFO);
			GlobalAPI.socketManager.send(pkg);
		}
		
		public function get pvpModule():PVPModule
		{
			return _handlerData as PVPModule;
		}
	}
}